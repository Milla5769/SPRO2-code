/*
 * Name: Timer and continutity test code
 * Created: 12. March 2024
 * Author : Milla Kølbæk Hansen
 */ 

//Including libraries
#include <stdio.h> //Gives us the opportunity to use printf and scanf
#include <avr/io.h> //Gives us access to the arduino inputs and outputs
#include <util/delay.h> //Gives us access to the delay functions
#include "usart.h" //Makes data communication possible
//#include <avr/eeprom.h> //Eprom opening
#include <avr/interrupt.h> //Including interrupts
//#include "lcd.h" //Lcd to work
//#include "i2cmaster.h" //Communication
//#include "lm75.h" //For temperature reading

//Creating structs
typedef struct
{
    unsigned int milliseconds;
    unsigned int seconds;
    unsigned int minutes;
} Time_t;

//Creating global variables
Time_t time;

//Creating prototypes
void init(void);

ISR(TIMER0_COMPA_vect)
{
    time.milliseconds++;
    if(time.milliseconds%1000 == 1)
    {
        time.seconds++;
        if (time.seconds == 60)
        {
            time.seconds = 0;
            time.minutes++;
        }
    }
}

//Runs the code
int main(void){
    //Configures the libraries
    uart_init();
    // i2c_init();
    io_redirect();
    // LCD_init();
    // lm75_init();
    init();

    // DDRB |= (1 << PORTB1);
    // DDRB &= ~(1<< PORTB0);
    // PORTB |= (1<<PORTB0);

    //The while-loop makes the code repeat forever
    while(1)
    { 
        printf("%d %d", time.seconds, time.minutes);
        _delay_ms(500);
        // if((!(1<<PORTB0)) && (1<<PORTB1))
        // {
        //     printf("1");
        //     PORTB|=(1<<PORTB1);
        // }
        // else
        // {
        //     printf("0");
        //     PORTB &= ~(1<<PORTB1);
        // }
    }
    return 0;
}

void init()
{
    // Set the Timer Mode to CTC
    TCCR0A |= (1 << WGM01);

    // Setting the prescaler to 64
    TCCR0B |= (1 << CS01) | (1 << CS00);

    // Set the value that you want to count to for 1 millisecond interrupt
    OCR0A = ((16000000 / 64) / 1000) - 1;
    
    // Enable Timer/Counter0 Compare Match A Interrupt
    TIMSK0 |= (1 << OCIE0A);

    // Enable global interrupts
    sei();
}